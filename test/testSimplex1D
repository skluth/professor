#!/usr/bin/env python

import numpy as np
import professor2 as prof

def f(x):
    return 3*x**3 + 2*x +1
# TODO: also try a non-polynomial function, e.g. sin

A = np.linspace( 0, 10, 20 )
Y = f(A)
X = np.array( [ [a] for a in A ] )

for i, x in enumerate( X ):
    print x, Y[i],
    if i < len(X)-1:
        deltax= X[i+1][0]-X[i][0]
        print deltax
    else:
        print

ipols = prof.SimplexInterpolation( X, Y )

X2= X+deltax/2

Z = [ ipols.value(x) for x in X ]
Z2 = [ ipols.value(x) for x in X2 ]

for i,x in enumerate(X2):
    print x[0],Z2[i],f(x[0])

import pylab
pylab.plot( A, Y, "ro", label="Anchors" )

pylab.plot( X, Z, "-", label="Simplex on points" )
pylab.plot( X2, Z2, "-", label="Simplex between points" )

pylab.legend(loc=2)
pylab.show()
